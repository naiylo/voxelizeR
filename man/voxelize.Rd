% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/voxelize.R
\name{voxelize}
\alias{voxelize}
\title{Voxelize point cloud with ray-tracing}
\usage{
voxelize(
  rays,
  tiles,
  zrange,
  res,
  ac_single,
  voxel_mode,
  process_tiles_parallel,
  process_order_tiles,
  ...
)
}
\arguments{
\item{rays}{An object of class Rays (LAS with added trajectory)}

\item{tiles}{sf. Tiles representing the area to be processed}

\item{zrange}{numeric. Boundaries for volume of interest in vertical dimension c(zmin, zmax)}

\item{res}{numeric. Resolution as single value for all three dimensions or as c(x, y, z)}

\item{ac_single}{numeric. Attenuation coefficient of single vegetation element (\url{https://www.mdpi.com/2072-4292/10/10/1580})}

\item{voxel_mode}{character. "LAD" for Leaf Area Density estimation with various estimators. "OCC" for occlusion mapping.}

\item{process_tiles_parallel}{numeric. Numbers of tiles to process in parallel (only on *nix systems with \link{mclapply})}

\item{process_order_tiles}{character. Processing order of tiles. "random" for randamized processing (typically balances processing of full and empty voxels). "seq" for sequential processing}

\item{...}{Additional arguments passed to other methods or functions.}
}
\value{
Vox object.
}
\description{
This function voxelizes a point cloud by tracing rays through a specified volume of interest.
It is designed to process LiDAR data for applications such as Leaf Area Density (LAD) estimation or occlusion mapping.
}
\details{
The 'voxelize' function takes a \code{Rays} object, representing a point cloud with an added trajectory,
and a set of tiles that define the area to be processed. It then performs ray-tracing within the specified
vertical boundaries (\code{zrange}) and at a given resolution (\code{res}). The function supports parallel processing
of tiles and allows for different processing orders to optimize performance.
}
\author{
Benjamin Brede
}
